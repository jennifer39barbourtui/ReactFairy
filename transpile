#!/usr/bin/env node

const { transpile } = require('.')
const findRoot = require('find-root')
const fs = require('fs')
const minimist = require('minimist')
const path = require('path')

const root = findRoot(process.cwd())

let {
  input,
  output,
  config,
  prefetch,
} = minimist(process.argv.slice(2), {
  string: ['input', 'output', 'config'],
  boolean: ['prefetch'],
  alias: {
    in: 'input',
    out: 'output',
  },
  default: {
    prefetch: false,
    input: `${root}/.appfairy/in`,
    output: `${root}/.appfairy/out`,
  },
})

if (config) {
  config = path.resolve(process.cwd(), config)
}
else try {
  fs.statSync(`${root}/af_config.js`)
  config = `${root}/af_config.js`
}
catch (e) {
  // File in default path not exist
}

const configBase = {
  prefetch,
  input,
  output,
  // Preserve original path
  __dirname: path.dirname(config),
}

if (config) {
  // Will throw an error if file not exist
  config = Object.assign(configBase, require(config))
}
else {
  config = configBase
}

config.input = path.resolve(process.cwd(), config.input)
config.output = path.resolve(process.cwd(), config.output)

try {
  fs.statSync(config.input)
}
catch (e) {
  throw Error(`Input path "${config.input}" not found`)
}

try {
  fs.statSync(config.output)
}
catch (e) {
  throw Error(`Output path "${config.output}" not found`)
}

transpile(config).then(() => {
  console.log()
  console.log(`Transpilation to ${config.output} has been complete`)
  console.log()
})
.catch((e) => {
  console.log()
  console.log('Transpilation has failed. Error:')
  console.log()
  console.log(e)
  console.log()
})
